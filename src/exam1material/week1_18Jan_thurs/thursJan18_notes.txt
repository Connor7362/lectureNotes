CIS 301. Logical Foundations of Programming.

Julie Thornton.

What is this class?
- logical reasoning (basics, puzzles)
- writing formal statements (propositional and predicate logic)
- proofs (why?)
- reasoning about code
    - analyzing what we know
    - identifying equivalent programs
    - simplifying programs
    - formally describing what programs do
- basics of proving correctness of programs (why?)


Syllabus

Canvas setup - weekly class material

Discord


/////////////////////////////////////////////////////////////////

HW 0 - due Fri Jan 19
    --> see how to do it

    make sure to extract to C:\ drive

HW 1 - due Tues Jan 23

/////////////////////////////////////////////////////////////////

Taking a step back...what is logic?

- analysis of an argument according to a set of rules
- given a set of premises (and sometimes a conclusion)


- we determine a valid conclusion when we assume
all the premises are true


Note that the premises might make no sense!

/////////////////////////////////////////////////////////////////

Premise 1: If a person wears a red shirt, then they don’t
    like pizza.
Premise 2: Fred is wearing a red shirt.

Conclusion: Fred doesn’t like pizza.

--> Is this a valid argument? yes




/////////////////////////////////////////////////////////////////

Logical Arguments with ”OR”

- can be ambiguous! Why?

I order fries or I order chips.

"or" can be inclusive or exclusive


- in English, how do we interpret "or"? (exclusive)



- in programming? inclusive




"Or" in THIS class: inclusive



Premise 1: I'll fold the laundry or I'll do the dishes.
Premise 2: I don't fold the laundry.

--> What can I conclude? I do the dishes




/////////////////////////////////////////////////////////////////

num = 5;
if (num < 4 || x >= 10) {
    statement;
}



Suppose we know "statement" is executed
--> What can we conclude? x >= 10






/////////////////////////////////////////////////////////////////

x = 9;
if (num < 4 || x >= 10) {
    if (num > 2) {
        statement;
    }
}



Suppose we know "statement" is executed
--> What can we conclude? num is 3 (assuming ints)


/////////////////////////////////////////////////////////////////

What rule are we seeing with an ”or” statement,
where we know that one of the statements is NOT true?

the other side has to be true



/////////////////////////////////////////////////////////////////

Logical Arguments with ”IF/THEN” (aka "implies" -> )

If it is raining, then I will get wet.
It is raining.

--> What can I conclude? I will get wet





/////////////////////////////////////////////////////////////////

When we have an ”if/then” statement,
and we know that the ”if” part is true?

    ...what can we always conclude?

then part is true



/////////////////////////////////////////////////////////////////

If I don’t hear my alarm, then I will be late for class.
I am late for class.

--> What can I conclude?

nothing (I might not have heard my alarm, or I might
be late for other reasons)



/////////////////////////////////////////////////////////////////

If I don’t hear my alarm, then I will be late for class.
I hear my alarm.

--> What can I conclude? nothing
(I might still be late for a different reason)






/////////////////////////////////////////////////////////////////

If I don’t hear my alarm, then I will be late for class.
I'm not late for class.

--> What can I conclude? you heard your alarm



if (condition) {
    statement
}

--> what if we know statement is NOT executed?

condition must not have been true


If p Then q

If not q then not p


/////////////////////////////////////////////////////////////////

More if/then logic in programming.



if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. What do we know?

nothing! condition might have been true, or y might have
already been 17.


/////////////////////////////////////////////////////////////////

y = 10;

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. Can we conclude anything now?
num < 4 || x >= 10

/////////////////////////////////////////////////////////////////

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is NOT 17 here. What do we know?

if statement condition is NOT true

num >= 4 and x < 10


/////////////////////////////////////////////////////////////////

Logic puzzles.

The puzzles in this lecture are all either from or inspired by:
”What is the Name of This Book?”, by Raymond Smullyan

/////////////////////////////////////////////////////////////////

The first puzzles involve the island of Knights and Knaves.
Each inhabitant is either a knight or a knave.

Knights ALWAYS tell the truth, and knaves ALWAYS lie.

/////////////////////////////////////////////////////////////////

Who can say, "I'm a knave"?

Can a knight? would be a lie
Can a knave? would be true, they have to lie

no one can say that





/////////////////////////////////////////////////////////////////

You see two inhabitants, Ava and Bob.

Ava says that Bob is a knave.
Bob says, ”Neither Ava nor I are knaves.”

What are Ava and Bob?

Suppose Ava is a knight. Then Bob has to be a knave.
    This works because Bob's statement would be a lie
    (because he IS a knave).

Suppose instead that Ava is a knave. Then Bob has to be a knight.
    Bob's statement would be a lie (since Ava IS a knave), so
    this doesn't work.

Solution: Ava - knight, Bob - knave


Neither x nor y --> not x and not y
not(x or y)





/////////////////////////////////////////////////////////////////

You see two different inhabitants, Eve and Fred.

Eve says, ”I am a knave or Fred is a knight.”

What are Eve and Fred?

(what does the "or" mean?) INCLUSIVE

Suppose Eve is a knight. For her statement to be true overall
   Fred must be a knight.

Suppose instead Eve is a knave. That makes her OR statement true,
    which doesn't work.

   They are both knights.



/////////////////////////////////////////////////////////////////

Lion always lies on Mondays, Tuesdays, and Wednesdays.
Lion always tells the truth on other days.
Unicorn always lies on Thursdays, Fridays, and Saturdays,
    and always tells the truth on other days.

On Sunday, everyone tells the truth.

Lion says: ”Yesterday was one of my lying days.”
Unicorn says: ”Yesterday was one of my lying days, too.”

What day is it?

    Sunday? NO! Yesterday was not Lion's lying day, and
        Lion should be telling truth.
    Monday? NO! Would be a lie for Unicorn, who should be telling
        truth.
    Tuesday? NO! Would be true for Lion, who should be lying.
        In a similar way, Wed/Fri/Sat don't work.
    Thursday? YES!






/////////////////////////////////////////////////////////////////

Tweedledee and Tweedledum are identical.
You know that one of them lies Mon/Tues/Wed,
and that the other lies Thurs/Fri/Sat.
(They tell the truth on non-lying days.)

You don’t know which is which.

You see both of them together.


First twin: Today is Monday or Wednesday
Second twin: Today is Monday or Sunday

What day of the week is it?

(what kind of OR?) inclusive

Mon: NO! Both statements would be true, one should lie and one
    should tell truth.
Tues/Thurs/Fri/Sat: NO! Both statements would be a lie,
    but one should be true.
Wed: YES, works out.
Sun: NO! Both statements would need to be true.

It is Wednesday.


/////////////////////////////////////////////////////////////////

You know that either Tweedledum or Tweedledee has
    lost a rattle.
You find it, and want to return it to the correct one.
You don’t know what day it is, but are sure that it isn’t
    Sunday.

(one is lying, one is telling the truth)

The first one says: "Tweedledee owns the rattle.”

The second one says: ”I'm Tweedledee!”

--> Who gets the rattle?


Suppose first twin is telling the truth. Then Tweedlede owns
    the rattle. Then second twin is lying, so second twin is
    Tweedledum. Means first twin is Tweedledee, and
    first twin owns rattle.

Suppose instead first twin is lying. Then Tweedledum own rattle
    and second twin is telling the truth and really is Tweedledee.
    The rattle belongs to the first twin (Tweedledum).


In both cases, first twin owns rattle.

(we CAN'T conclude who is who)

/////////////////////////////////////////////////////////////////

Homework 0: due Friday, January 19
    - get Sireum/IntelliJ + GitHub ready (do this now!)
    - post something in Discord
    - come to office hours or post in Discord if
        you need software setup help!

Homework 1: due Tuesday, January 23
    - first page of homework is logical reasoning
        (what we did today)
    - second page is logic puzzles

Next: finish logic puzzles, begin truth tables