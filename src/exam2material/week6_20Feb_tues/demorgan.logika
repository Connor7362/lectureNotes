//¬p ∨ ¬q     and     ¬(p ∧ q)

//prove equivalence

//proof 1
/*
¬p ∨ ¬q  |- ¬(p ∧ q)
{
    1. !p V !q              premise
    2. { //use !i pattern to prove !(p ^ q)
        3. p ^ q            assume
        4. p                ^e1 3
        5. q                ^e2 3

        //no obvious path, try Ve on premise
        6. {
            7. !p           assume
            8. _|_          !e 4 7
            //goal: _|_
        }
        9. {
            10. !q          assume
            11. _|_         !e 5 10
            //goal: _|_
        }
        12. _|_             Ve 1 6 9


        //goal: _|_
    }
    13. !(p ^ q)            !i 2
}
*/

//proof 2
¬(p ∧ q) |- ¬p ∨ ¬q
{
    1. !(p ^ q)                 premise

    //no obvious pattern, try pbc on the goal conclusion
    2. {
        3. !(¬p ∨ ¬q)           assume

        //no obvious way to get p, try pbc
        4. {
            5. !p               assume
            6. ¬p ∨ ¬q          Vi1 5
            7. _|_              !e 6 3
            //goal: _|_
        }
        8. p                    pbc 4

        //now do the same thing to get q
        9. { //using pbc
            10. !q              assume
            11. ¬p ∨ ¬q         Vi2 10
            12. _|_             !e 11 3
        }
        13. q                   pbc 9

        14. p ^ q               ^i 8 13
        15. _|_                 !e 14 1

        //try to get: p ^ q, would _|_ with premise
        //first: try to prove p
        //second: try to prove q
        //goal: _|_
    }
    16. ¬p ∨ ¬q                 pbc 2
}