HW 4 posted, due Tues Feb 20

--> check the format of your link

////////////////

Today:
- more with not introduction and not elimination
- remaining negation rules
- natural deduction proof strategies
- proving equivalence with natural deduction

/////////////////

(not3.logika)
p → q ⊢ ¬q → ¬p (what is this?)




/////////////////////////

Contrapositives with if-statements:

if (condition) {
    statement
}

What do we know if "condition" is true?

    statement


What do we know if "statement" did NOT happen?
    condition couldn't have happened






////////////////////

Bottom-elimination:

         ⊥
⊥e:  ----------
         R


_|_e


Proof by contradiction (reductio ad absurdum):

       {¬P assume
        ... ⊥}
pbc:  ----------
          P


--> Difference between ¬i and pbc?

///////////////////////////////////

First examples.

p, ¬p ⊢ q
{
    1. p            premise
    2. !p           premise
    3. _|_          !e 1 2
    4. q           _|_e 3
}


    //how does this make logical sense?
    trying to show that any time all the premises are true
    then the conclusion is also true

    F -> T


p ∨ q, ¬p ⊢ q
{
    1. p ∨ q            premise
    2. !p               premise
    3. { //Ve
        4. p            assume
        5. _|_          !e 4 2
        6. q            _|_e 5
        //goal: q
    }
    7. {
        8. q            assume
        //our goal was q, we're already there
    }
    9. q                Ve 1 3 7
}



¬¬p ⊢ p
{
    1. ¬¬p          premise
    2. {
        3. !p       assume
        4. _|_      !e 3 1

        //goal: _|_
    } //goal: p with pbc

    5. p            pbc 2
}




///////////////////////////////////

In separate files:


¬q → ¬p ⊢ p → q         //not4.logika




¬(¬p ∨ ¬q) ⊢ p ∧ q      //not5.logika




//////////////////

A THEOREM in propositional logic is something that is
always true with no need for premises. For example:


Law of the excluded middle. (LEM)

p ∨ ¬p



What would a theorem be in a truth table? tautology


Prove LEM:

⊢ p ∨ ¬p                //lem.logika



⊢ (theorem that you are trying to prove)

//////////////////////////////////

How do we approach proofs?

1. Write out all the premises
2. Extract all information from premises (∧e, →e)
3. Look at what you are trying to prove (find its top level operator)

    ∧ - think of it as two separate proofs. Prove the LHS of
        the goal ^, then prove the RHS, then use ^i to make
        the conclusion

    ∨ - no real pattern. Think - can you prove ONE side of the
        goal OR? If so, do that and use Vi.

        see if you have an OR statement already - use Ve

        last resort: use pbc (assume conclusion is not true,
            get to _|_)

    → - follow ->i pattern. Subproof, assume LHS of your goal
        ->, try to get to the RHS of your goal implies

    ¬(something) - follow !i pattern. Subproof, assume "something",
        try to get a _|_.

    just a propositional atom?
        look for where that atom IS in your premises
            prove p
            premises: w->p (would want to prove w to get p)

        is there a _|_ among the premises? if so, use _|_
            to conclude whatever you want



After each claim - see what we can extract that is new.

Inside a subproof - think about top-level op for your goal
    in that subproof



Doesn't fit a pattern or doesn't work out from above:
- Negation involved?

- As a last resort, copy/paste LEM proof to have
    (something) ∨ ¬(something).
    Use OR-elimination on it.



--> when do we open a subproof?

    Ve, ->i, !i, pbc
    make a note of which one you are using when you open a subproof


--> what is the first justification? assume

--> can we assume anything? yes....but, needs to fit
    pattern of one of the 4 to finish the subproof.



/////////////////////////////////

Putting it all together.


(big1.logika)
(c ∧ n) → t, h ∧ ¬s, h ∧ ¬(s ∨ c) → p ⊢ (n ∧ ¬t) → p

//////////////////

<--- stopped here, will continue on Tues Feb 20

/////////////////

(big2.logika)
(p → q) → r, s → ¬p, t, (¬s ∧ t) → q ⊢ r


/////////////////////////////////

Proving equivalence (demorgan.logika)

¬p ∨ ¬q     and     ¬(p ∨ q)

/////////////////////////////////

Next time:
- soundness and completeness
- begin sets